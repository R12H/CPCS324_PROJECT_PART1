package GraphFramework;

import java.util.LinkedList;
import java.util.PriorityQueue;

public class MHPrimAlg extends MSTAlgorithm {

    int cost;

    public MHPrimAlg(Graph graph) {
        super(graph);
    }

    // Prim's algorithm implementation using Min-heap
    public void mhPrim() {
        LinkedList<Edge>[] adjacencyList = super.gragh.adjacencylist;

        // Create a priority queue (Min-heap) to store edges
        PriorityQueue<Edge> minHeap = new PriorityQueue<>((e1, e2) -> e1.getWeight() - e2.getWeight());

        // Create a boolean array to track visited vertices
        boolean[] visited = new boolean[super.gragh.totalVetices];

        // Start from the first vertex (assumed to be the source)
        visited[0] = true;

        // Add all edges of the first vertex to the priority queue
        for (Edge edge : adjacencyList[0]) {
            minHeap.add(edge);
        }

        LinkedList<Edge> mst = new LinkedList<>();

        // Process vertices until the priority queue is empty
        while (!minHeap.isEmpty()) {
            // Extract the edge with the minimum weight
            Edge minEdge = minHeap.poll();

            // Get the target vertex of the minimum edge
            Vertex targetVertex = minEdge.getTarget();

            // If the target vertex is not visited
            if (!visited[Integer.parseInt(targetVertex.getLabel())]) {
                // Mark it as visited
                visited[Integer.parseInt(targetVertex.getLabel())] = true;

                // Add the edge to the MST
                mst.add(minEdge);
                cost += minEdge.getWeight();

                // Add all edges of the target vertex to the priority queue
                for (Edge edge : adjacencyList[Integer.parseInt(targetVertex.getLabel())]) {
                    minHeap.add(edge);
                }
            }
        }

        setMSTResultList(mst);
    }

    public int getCost() {
        return cost;
    }

    public void displayResultingMST(LinkedList<Edge> edgeList) {
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm:");
        for (Edge edge : edgeList) {
            System.out.println("Office No. " + edge.getSource().getLabel() + " - Office No. " + edge.getTarget().getLabel() + " : line length: " + edge.getWeight());
        }
        System.out.println("The cost of designed phone network: " + cost);
    }
}
